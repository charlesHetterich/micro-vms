#!/bin/sh
set -eu

# Make /dev usable *before* any redirections
mount -t devtmpfs devtmpfs /dev 2>/dev/null || true
[ -e /dev/null ] || mknod -m 666 /dev/null c 1 3

# Mount proc/sys so we can read cmdline and have a sane env
mount -t proc  proc /proc  2>/dev/null || true
mount -t sysfs sys  /sys   2>/dev/null || true

# Parse kernel args
CMDLINE="$(cat /proc/cmdline 2>/dev/null || echo)"
get_arg() { echo "$CMDLINE" | sed -n "s/.*$1=\([^ ]*\).*/\1/p"; }
overlay_root="$(get_arg overlay_root)"; [ -n "${overlay_root:-}" ] || overlay_root=ram
overlay_id="$(get_arg overlay_id)";     [ -n "${overlay_id:-}" ] || overlay_id=0

# Writable scratch
mount -t tmpfs -o noatime,nosuid,nodev,mode=0755 tmpfs /run 2>/dev/null || true

# Prepare overlay backing store
BASE=/run/ovl
mkdir -p "$BASE"
if [ "$overlay_root" = "ram" ]; then
  # upper/work will live on tmpfs BASE
  :
else
  # persistent upper on /dev/vdb, etc.
  mount -t ext4 "/dev/$overlay_root" "$BASE"
fi

mkdir -p "$BASE/root" "$BASE/work" /run/newroot

# Mount overlay at new root
mount -t overlay overlay \
  -o noatime,lowerdir=/,upperdir="$BASE/root",workdir="$BASE/work" \
  /run/newroot

# Create the pivot target *inside the new root* (must be after the mount above)
mkdir -p /run/newroot/.oldroot

# Carry essential mounts into the new root
for d in dev proc sys run; do
  mkdir -p "/run/newroot/$d"
  mount --move "/$d" "/run/newroot/$d" 2>/dev/null || true
done

# Switch root
pivot_root /run/newroot /run/newroot/.oldroot

# Optional: write netplan in the new (writable) root
# TODO! ask chatgpt why this is optional
mkdir -p /etc/netplan
cat >/etc/netplan/01-netcfg.yaml <<EOF
network:
  version: 2
  ethernets:
    eth0:
      dhcp4: false
      addresses: [172.30.0.${overlay_id}/24]
      gateway4: 172.30.0.1
      nameservers: { addresses: [8.8.8.8,1.1.1.1] }
EOF

# Setup vsocket on port 5005
/usr/local/bin/guest-go-init >/dev/null 2>&1 &

# 9) Detach old root (best effort) and hand over to real init
umount -l /.oldroot 2>/dev/null || true
exec /sbin/init
